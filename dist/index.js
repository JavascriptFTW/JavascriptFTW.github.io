(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

$(document).ready(function () {

	var DEG_RAD_CONST = Math.PI * 2;
	var SCROLL_COEFF = 0.05;

	var $window = $(window);

	var $body = $(document.body);

	var $titleContainer = $(".title-container");

	var $head = $(".title");
	var $subhead = $("<p class='title-sub'>Inventor of the potato</p>");

	$titleContainer.append($subhead);
	$body.append($titleContainer);

	var $frameContainer = $(".frame-container");

	var $bubbleContainer = $(".bubble-container");

	var $navControls = $(".nav-bar-controls");

	var $exitFrame = $navControls.find("#exit-frame");

	var $unscrollFrame = $navControls.find("#unscroll-frame");

	$exitFrame.css("opacity", "0");
	$unscrollFrame.css("opacity", "0");

	var scrollMomentum = 0;

	var subheadMsg = ["Inventor of the potato", "Homosapien extroardinaire", "Your best nightmare", "Your worst best friend", "LOL", "A cat", "Not an alien", "Java !== JavaScript", "The meta guy", "..."];

	var Bubble = function () {
		function Bubble(cfg) {
			_classCallCheck(this, Bubble);

			this.$element = $("<div class='bubble'></div>");
			this.$title = $("<p class='bubble-title'>" + cfg.title + "</p>");
			this.titleText = cfg.title;

			this.$element.append(this.$title);
			$bubbleContainer.append(this.$element);

			this.relPos = {
				x: cfg.x,
				size: cfg.size
			};

			this.pxPos = {
				x: null,
				y: 0,
				size: null
			};

			this.$element.click(this.onClickWrapper.bind(this));

			this.calcPos();

			this.uid = Date.now();
		}

		_createClass(Bubble, [{
			key: "onClickWrapper",
			value: function onClickWrapper() {
				this.onClick();
			}
		}, {
			key: "onClick",
			value: function onClick() {}
		}, {
			key: "calcPos",
			value: function calcPos() {
				this.pxPos.size = parseFloat(this.$element.width());
				this.pxPos.x = this.relPos.x / 100 * parseFloat(this.$element.parent().width()) - this.pxPos.size / 2;
				this.pxPos.y = 0;

				this.pxPos.x = window.innerWidth / 2 + (this.pxPos.x - window.innerWidth / 2) * (1 + 1 / window.innerWidth * window.innerHeight / 10);

				if (this.index === undefined) {
					this.index = $bubbleContainer.children().length - 1;
				}

				var elementEmWidth = Math.max(Math.min(this.titleText.length + 1, 10), 8);
				if (window.innerWidth < 1100) {
					if (this.index % 2 === 0) {
						this.pxPos.y = window.innerHeight * 0.17;
					}

					this.pxPos.x = window.innerWidth / 2 + (this.pxPos.x - window.innerWidth / 2) * 1.1;
				}

				this.$element.css({
					"top": "0px",
					"left": this.pxPos.x + "px",
					"width": elementEmWidth + "em",
					"height": elementEmWidth + "em"
				});

				var elementSize = parseFloat(this.$element.css("width"));

				this.$title.css({
					"top": elementSize / 2 - parseFloat(this.$title.css("height")) / 2,
					"left": elementSize / 2 - parseFloat(this.$title.css("width")) / 2
				});
			}
		}, {
			key: "update",
			value: function update() {}
		}]);

		return Bubble;
	}();

	var activeFrame = null;

	var LinkBubble = function (_Bubble) {
		_inherits(LinkBubble, _Bubble);

		function LinkBubble(cfg) {
			_classCallCheck(this, LinkBubble);

			var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(LinkBubble).call(this, cfg));

			_this.source = cfg.source;

			_this.cosSeed = Math.random() * 360 / DEG_RAD_CONST;

			_this.frameAppended = false;

			_this.$frameWrapper = $("<div class='frame-wrapper'></div>");
			_this.$frame = $("<iframe class='frame-content'></iframe>");

			_this.$frame.attr({
				/* seamless: "seamless", */
				frameborder: "0",
				scrolling: "no",
				src: _this.source
			});

			_this.$frameWrapper.append(_this.$frame);

			_this.$frameContents = _this.$frame.contents().find("html");

			_this.wrapperTop = parseFloat($frameContainer.css("top"));

			_this.$frameWrapper.css({
				"top": _this.wrapperTop + "px"
			});

			_this.frameScroll = 0;

			_this.frameHeight = 0;
			return _this;
		}

		_createClass(LinkBubble, [{
			key: "drift",
			value: function drift() {
				this.cosSeed += 0.03;
				this.cosSeed %= 360;
				this.$element.css({
					"top": this.pxPos.y + Math.cos(this.cosSeed) * this.pxPos.size / 15 + "px"
				});
			}
		}, {
			key: "onClick",
			value: function onClick() {
				this.$frameWrapper.css("z-index", 1);

				if (activeFrame && activeFrame.uid !== this.uid) {
					scrollMomentum = 0;
					activeFrame.deactivate(true);
				}

				activeFrame = this;

				if (!this.frameAppended) {
					$frameContainer.append(this.$frameWrapper);
					this.frameAppended = true;
				}

				this.$frame.stop().animate({
					"opacity": "1"
				}, {
					duration: 1500
				});
				$titleContainer.addClass("up");

				// Magicks!
				this.animateIn();

				$exitFrame.stop().animate({
					"opacity": 1
				}, 1000);
				$exitFrame.css("cursor", "pointer");
			}
		}, {
			key: "animateIn",
			value: function animateIn() {
				/* Don't even ask me why this method works. I don't even know, it just works. This scares me */
				if (parseFloat(this.$frameWrapper.css("top")) > 0) {
					this.$frameWrapper.css("top", "0px");
					setTimeout(this.animateIn.bind(this), 1);
				}
			}
		}, {
			key: "unscroll",
			value: function unscroll() {
				setTimeout(this._unscroll.bind(this), 1);
			}
		}, {
			key: "_unscroll",
			value: function _unscroll(times) {
				scrollMomentum = 0;
				times = times + 1 || 0;
				this.frameScroll += 1.2 * times;
				if (-this.frameScroll > 0) {
					setTimeout(this._unscroll.bind(this, times), 7);
				} else {
					this.frameScroll = 0;
					this.scrolled = false;
					$unscrollFrame.stop().animate({
						"opacity": 0
					}, 1000);
					$unscrollFrame.css("cursor", "default");
				}
			}
		}, {
			key: "addScroll",
			value: function addScroll(amount) {
				if (this.wrapperTop + this.frameHeight < window.innerHeight) {
					return;
				}

				if (-this.frameScroll > 500 && $unscrollFrame.css("opacity") === "0") {
					$unscrollFrame.animate({
						"opacity": 1
					}, 1000);
					$unscrollFrame.css("cursor", "pointer");
				}

				this.frameScroll += amount;

				var pos = this.wrapperTop + this.frameScroll + this.frameHeight;

				if (pos < window.innerHeight - 20) {
					this.frameScroll = -this.wrapperTop - this.frameHeight + (window.innerHeight - 20);
				} else if (this.frameScroll > 0) {
					this.frameScroll = 0;
				}

				if (-this.frameScroll > 0) {
					this.scrolled = true;
				}
			}
		}, {
			key: "deactivate",
			value: function deactivate(instant) {
				instant = instant || false;
				this.$frameWrapper.css("z-index", -1);
				this.unscroll();
				$titleContainer.removeClass("up");

				setTimeout(this._deactivate.bind(this), 1500 * instant + 1);

				$exitFrame.animate({
					"opacity": 0
				}, 1000);

				$unscrollFrame.stop().animate({
					"opacity": 0
				}, 1000);
				$exitFrame.css("cursor", "default");
			}
		}, {
			key: "_deactivate",
			value: function _deactivate() {
				this.$frame.animate({
					"opacity": 0
				}, 1000, function () {
					this.$frameWrapper.css({
						"top": window.innerHeight - parseFloat($frameContainer.css("top")) / 2 + "px"
					});
				}.bind(this));
			}
		}, {
			key: "update",
			value: function update() {
				if (this.frameAppended) {
					var frameDocHeight = this.$frame.contents().find("html").height();

					if (this.frameHeight !== frameDocHeight) {
						this.frameHeight = frameDocHeight;
						this.$frame.height(frameDocHeight);
					}
				}

				this.$frame.css("top", this.frameScroll + "px");

				this.drift();
			}
		}]);

		return LinkBubble;
	}(Bubble);

	var bubbles = [new LinkBubble({
		x: 30,
		size: 7,
		source: "resume.html",
		title: "Resume"
	}), new LinkBubble({
		x: 40,
		size: 7.5,
		source: "about.html",
		title: "About Me"
	}), new LinkBubble({
		x: 50,
		size: 6.5,
		source: "blog/index.html",
		title: "My Blog"
	}), new LinkBubble({
		x: 60,
		size: 7,
		source: "work.html",
		title: "My Work"
	}), new LinkBubble({
		x: 70,
		size: 7.5,
		source: "contact.html",
		title: "Contact Me"
	})];

	$exitFrame.click(function () {
		scrollMomentum = 0;
		if (activeFrame) {
			activeFrame.deactivate();
		}
	});

	$unscrollFrame.click(function () {
		scrollMomentum = 0;
		if (activeFrame && activeFrame.scrolled) {
			activeFrame.unscroll();
		}
	});

	$subhead.click(function () {
		$subhead.text(subheadMsg[Math.floor(Math.random() * subheadMsg.length)]);
	});

	function updatePage() {
		for (var i = 0; i < bubbles.length; i++) {
			bubbles[i].update();
		}

		if (activeFrame) {
			activeFrame.addScroll(scrollMomentum);
			scrollMomentum *= 0.9;
		}

		setTimeout(updatePage, 10);
	}

	$body.mousewheel(function (event) {
		if (activeFrame) {
			scrollMomentum += event.originalEvent.wheelDelta * SCROLL_COEFF;
		}
	});

	setTimeout(updatePage, 1);

	$(window).resize(function () {
		for (var i = 0; i < bubbles.length; i++) {
			bubbles[i].calcPos();
		}
	});
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
